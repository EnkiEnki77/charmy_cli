#!/bin/bash
#Above is the shebang that defines the path to the interpreter that should be used when the file is executed.


setup_project(){

#     Checks if a first argument was passed to the cli when it was executed in the command line
      if [ "$1" ]
            then
#           If it was, checks if said argument is the string create
            if [ "$1" == "create" ];
                  then
#                 if it was, checks that a second argument was also passed
                  if [ "$2" ]
                        then
#                       If it was, indicates to user project is being initialized
                        echo "Initializing project: $2"
#                       Changes working directory to the location I store pycharm projects or exits if it doesnt exist
                        cd ~/workspace/PycharmProjects/ || exit
#                       printf command is executed, formatting a string with the 2nd cli positional argument. printf's output is
#                       piped into the gh repo create command's input. $2 is the name we're setting for the gh repo
#                       being created. gh repo create outputs the url to the repo created on gh, it's saved in the
#                       REMOTE variable.
                        REMOTE=$(printf "\n%s\n\n\ny\ny\npython\nn\ny\ny\n" "$2" | gh repo create "$2" --public)
#                       The gh repo is cloned into my pycharm project directory. Cloning the project in works to create
#                       an empty project, and automatically attaches the gh repo to it as a remote, so we dont have to
                        git clone "$REMOTE"
#                       changes working directory to the project
                        cd ./"$2" || exit
#                       Generates a virtual environment for the project.
                        pip3 freeze > requirements.txt
                        pipx install virtualenv
                        virtualenv -p python3 .venv
                        chmod -R 777 ./.venv/bin/
                        if grep -q "source ./.venv/bin/activate" ~/.bashrc -ne 0; then
                          echo "source ./.venv/bin/activate" >> ~/.bashrc
                        fi

#                       adding files to the project to configure the template
                        touch main.py
                        touch README.md
                        touch .gitignore
#                       writing to the main.py file to set it up
                        cat <<EOF > main.py
def main():
        print("Hello world!")


if __name__ == "__main__":
        main()
EOF
#                       writing to the gitignore file to set it up with the stuff that should be ignored using the Jetbrains template
#                       plus some personal stuff
                        cat <<EOF > .gitignore
.venv/
.idea/
.env
__pycache__

# Covers JetBrains IDEs: IntelliJ, RubyMine, PhpStorm, AppCode, PyCharm, CLion, Android Studio, WebStorm and Rider
# Reference: https://intellij-support.jetbrains.com/hc/en-us/articles/206544839

# User-specific stuff
.idea/**/workspace.xml
.idea/**/tasks.xml
.idea/**/usage.statistics.xml
.idea/**/dictionaries
.idea/**/shelf

# AWS User-specific
.idea/**/aws.xml

# Generated files
.idea/**/contentModel.xml

# Sensitive or high-churn files
.idea/**/dataSources/
.idea/**/dataSources.ids
.idea/**/dataSources.local.xml
.idea/**/sqlDataSources.xml
.idea/**/dynamic.xml
.idea/**/uiDesigner.xml
.idea/**/dbnavigator.xml

# Gradle
.idea/**/gradle.xml
.idea/**/libraries

# Gradle and Maven with auto-import
# When using Gradle or Maven with auto-import, you should exclude module files,
# since they will be recreated, and may cause churn.  Uncomment if using
# auto-import.
# .idea/artifacts
# .idea/compiler.xml
# .idea/jarRepositories.xml
# .idea/modules.xml
# .idea/*.iml
# .idea/modules
# *.iml
# *.ipr

# CMake
cmake-build-*/

# Mongo Explorer plugin
.idea/**/mongoSettings.xml

# File-based project format
*.iws

# IntelliJ
out/

# mpeltonen/sbt-idea plugin
.idea_modules/

# JIRA plugin
atlassian-ide-plugin.xml

# Cursive Clojure plugin
.idea/replstate.xml

# SonarLint plugin
.idea/sonarlint/

# Crashlytics plugin (for Android Studio and IntelliJ)
com_crashlytics_export_strings.xml
crashlytics.properties
crashlytics-build.properties
fabric.properties

# Editor-based Rest Client
.idea/httpRequests

# Android studio 3.1+ serialized cache file
.idea/caches/build_file_checksums.ser
EOF
#                       staging all the changes to git
                        git add .
#                       committing the changes
                        git commit -m 'first commit'
#                       renaming the default master branch to main to follow the github convention
                        git branch -M main
#                       pushing the changes to the remote repository and setting it as an upstream branch so we can
#                       just type git push in the future and not have to include origin main
                        git push -u origin main

#                       prompting the user for input on whether the project should be opened after creation. Saving
#                       response in a variable
                        read -p "Open the project? (y/n): " confirm
#                       checking if variable is yes
                        if [ "$confirm" == "y" ]
                              then
#                             if it is then opening the project in Pycharm
                              pycharm64.exe ../"$2"
                        fi
                  else
                        echo "charmy create command requires a name for the project to create"
                  fi
            elif [ "$1" == "open"  ];
                  then
                  if [ "$2" ]
                        then
                        cd ~/workspace/PycharmProjects || exit
                        pycharm64.exe "$2"
                  else
                        echo "charmy open command requires a name for the project to open"
                  fi
            fi
      fi

}

setup_project "$1" "$2"


